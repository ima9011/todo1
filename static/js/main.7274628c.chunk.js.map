{"version":3,"sources":["helpers/store-provider.ts","helpers/use-store.ts","helpers/use-enter.ts","features/TodoItem.tsx","features/TodoList.tsx","features/TodoNew.tsx","App.tsx","serviceWorker.ts","stores/todo-item.ts","index.tsx","stores/todo-list.ts"],"names":["StoreContext","createContext","StoreProvider","Provider","useStore","useContext","onEnterPress","cb","e","key","TodoItem","todo","todoList","useState","newText","setText","isEditing","setEdit","saveText","updateText","className","type","onKeyDown","onChange","target","value","onClick","text","toggleIsDone","defaultChecked","isDone","removeTodo","TodoList","useObserver","openTodos","map","id","finishedTodos","TodoNew","newTodo","setTodo","placeholder","addTodo","App","Boolean","window","location","hostname","match","Date","now","this","observable","action","shallow","todos","forEach","list","filter","push","splice","indexOf","computed","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"8OAGaA,G,YAAeC,wBAAwB,KACvCC,EAAgBF,EAAaG,SCA7BC,EAAW,kBAAgBC,qBAAWL,I,OCFtCM,EAAe,SAACC,GACzB,OAAO,SAACC,GACU,UAAVA,EAAEC,KACFF,MCICG,EAAW,SAAC,GAAmB,IAAlBC,EAAiB,EAAjBA,KAChBC,EAAWR,IADsB,EAEZS,mBAAS,IAFG,mBAEhCC,EAFgC,KAEvBC,EAFuB,OAGVF,oBAAS,GAHC,mBAGhCG,EAHgC,KAGrBC,EAHqB,KAKjCC,EAAW,WACfP,EAAKQ,WAAWL,GAChBG,GAAQ,GACRF,EAAQ,KAGV,OACI,yBAAKK,UAAU,aAEPJ,EACI,6BACI,2BAAOK,KAAK,OAAOC,UAAWhB,EAAaY,GAAWK,SAAU,SAACf,GAAD,OAAOO,EAAQP,EAAEgB,OAAOC,UACxF,4BAAQC,QAASR,GAAjB,SAGJ,6BACI,8BAAOP,EAAKgB,MACZ,2BAAON,KAAK,WAAWE,SAAUZ,EAAKiB,aAAcC,eAAgBlB,EAAKmB,SACzE,4BAAQJ,QAAS,kBAAMT,GAAQ,KAA/B,QACA,4BAAQS,QAAS,kBAAMd,EAASmB,WAAWpB,KAA3C,Q,OC5BXqB,EAAW,WACpB,IAAMpB,EAAWR,IAEjB,OAAO6B,aAAY,kBACf,yBAAKb,UAAU,aACX,yBAAKA,UAAU,cACX,6CACCR,EAASsB,UAAUC,KAAI,SAAAxB,GAAI,OAAI,kBAAC,EAAD,CAAUF,IAAG,UAAKE,EAAKyB,GAAV,YAAgBzB,EAAKgB,MAAQhB,KAAMA,QAEpF,yBAAKS,UAAU,kBACX,gDACCR,EAASyB,cAAcF,KAAI,SAAAxB,GAAI,OAAI,kBAAC,EAAD,CAAUF,IAAG,UAAKE,EAAKyB,GAAV,YAAgBzB,EAAKgB,MAAQhB,KAAMA,aCZvF2B,EAAU,WAAO,IAAD,EACEzB,mBAAS,IADX,mBAClB0B,EADkB,KACTC,EADS,KAEnB5B,EAAWR,IAOjB,OAEI,yBAAKgB,UAAU,YAEX,2BAAOC,KAAK,OAAOI,MAAOc,EAASE,YAAY,yBAAyBnB,UAAWhB,GAT3E,WACZM,EAAS8B,QAAQH,GACjBC,EAAQ,OAOsGjB,SAAU,SAACf,GAAD,OAAOgC,EAAQhC,EAAEgB,OAAOC,YCAzIkB,EAZH,WACR,OACI,6BACA,yBAAKvB,UAAU,SAAf,SACA,yBAAKA,UAAU,OACX,kBAAC,EAAD,MACA,kBAAC,EAAD,SCCQwB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,mEChBetC,G,EAMjB,WAAYiB,GAAe,yBAL3BS,GAAKa,KAAKC,MAKgB,gJACtBC,KAAKxB,KAAOA,G,kCAJfyB,K,wEAA0B,M,oCAC1BA,K,yEAA6B,K,0CAM7BC,K,oFACc,WACX,EAAKvB,QAAU,EAAKA,W,wCAGvBuB,K,oFACY,SAAC1B,GACV,EAAKA,KAAOA,M,GCXdf,EAAW,ICLjB,EACKwC,IAAWE,QADhB,aAGI,WAAYC,GAAkB,6HAC1BA,EAAMC,QAAQL,KAAKT,SAJ3B,+CAiBI,WAEI,OAAOS,KAAKM,KAAKC,QAAO,SAAA/C,GAAI,OAAIA,EAAKmB,YAnB7C,qBAsBI,WAEI,OAAOqB,KAAKM,KAAKC,QAAO,SAAA/C,GAAI,OAAKA,EAAKmB,cAxB9C,kHAC2C,MAD3C,qCAOKuB,KAPL,oFAQc,SAAC1B,GACP,EAAK8B,KAAKE,KAAK,IAAIjD,EAASiB,QATpC,wCAYK0B,KAZL,oFAaiB,SAAC1C,GACV,EAAK8C,KAAKG,OAAO,EAAKH,KAAKI,QAAQlD,GAAO,OAdlD,yCAiBKmD,KAjBL,+GAsBKA,KAtBL,yEDK8B,CAC1B,kBACA,sBACA,aAIJjB,OAAOjC,SAAWA,EAElBmD,IAASC,OACL,kBAAC9D,EAAD,CAAeuB,MAAOb,GAClB,kBAAC,EAAD,OAEFqD,SAASC,eAAe,SFsHxB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.7274628c.chunk.js","sourcesContent":["import { createContext } from 'react';\nimport {TodoList} from \"../stores/todo-list\";\n\nexport const StoreContext = createContext<TodoList>({} as TodoList);\nexport const StoreProvider = StoreContext.Provider;\n","import { useContext } from 'react';\nimport { StoreContext } from './store-provider';\nimport {TodoList} from \"../stores/todo-list\";\n\nexport const useStore = (): TodoList => useContext(StoreContext);\n","import {KeyboardEvent} from \"react\";\n\nexport const onEnterPress = (cb: any) => {\n    return (e: KeyboardEvent) => {\n        if (e.key === 'Enter') {\n            cb();\n        }\n    }\n};\n","import React, {useState} from 'react';\nimport TodoItemClass  from \"../stores/todo-item\";\nimport {useStore} from \"../helpers/use-store\";\nimport {onEnterPress} from \"../helpers/use-enter\";\n\ninterface Props {\n    todo: TodoItemClass;\n}\n\nexport const TodoItem = ({todo}: Props) => {\n    const todoList = useStore();\n    const [newText, setText] = useState('');\n    const [isEditing, setEdit] = useState(false);\n\n    const saveText = () => {\n      todo.updateText(newText);\n      setEdit(false);\n      setText('');\n    };\n\n    return (\n        <div className=\"todo-item\">\n            {\n                isEditing ?\n                    <div>\n                        <input type=\"text\" onKeyDown={onEnterPress(saveText)} onChange={(e) => setText(e.target.value)}/>\n                        <button onClick={saveText}>save</button>\n                    </div>\n                    :\n                    <div>\n                        <span>{todo.text}</span>\n                        <input type=\"checkbox\" onChange={todo.toggleIsDone} defaultChecked={todo.isDone}></input>\n                        <button onClick={() => setEdit(true)}>edit</button>\n                        <button onClick={() => todoList.removeTodo(todo)}>X</button>\n                    </div>\n            }\n        </div>\n    )\n};\n","import React from 'react';\nimport {useStore} from \"../helpers/use-store\";\nimport {TodoItem} from \"./TodoItem\";\nimport {useObserver} from \"mobx-react-lite\";\n\nexport const TodoList = () => {\n    const todoList = useStore();\n\n    return useObserver(() => (\n        <div className=\"todo-list\">\n            <div className=\"open-todos\">\n                <span>Opens Works</span>\n                {todoList.openTodos.map(todo => <TodoItem key={`${todo.id}-${todo.text}`} todo={todo}/>)}\n            </div>\n            <div className=\"finished-todos\">\n                <span>Finished Works</span>\n                {todoList.finishedTodos.map(todo => <TodoItem key={`${todo.id}-${todo.text}`} todo={todo}/>)}\n            </div>\n        </div>\n    ));\n};\n","import React, {useState} from 'react';\nimport {useStore} from \"../helpers/use-store\";\nimport {onEnterPress} from \"../helpers/use-enter\";\n\nexport const TodoNew = () => {\n    const [newTodo, setTodo] = useState('');\n    const todoList = useStore();\n\n    const addTodo = () => {\n        todoList.addTodo(newTodo);\n        setTodo('');\n    };\n\n    return (\n       \n        <div className=\"todo-new\">\n            \n            <input type=\"text\" value={newTodo} placeholder=\"What needs to be done?\" onKeyDown={onEnterPress(addTodo)} onChange={(e) => setTodo(e.target.value)}/>\n            {/* <button onClick={addTodo}>Add New</button> */}\n        </div>\n    )\n};\n","import React from 'react';\nimport './App.css';\nimport {TodoList} from \"./features/TodoList\";\nimport {TodoNew} from \"./features/TodoNew\";\n\nconst App = () => {\n    return (\n        <div>\n        <div className=\"title\">todos</div>\n        <div className=\"App\"> \n            <TodoNew/>\n            <TodoList/>\n        </div>\n        </div>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import {action, observable} from \"mobx\";\n\nexport default class TodoItem {\n    id = Date.now();\n\n    @observable text: string = '';\n    @observable isDone: boolean = false;\n\n    constructor(text: string) {\n        this.text = text;\n    }\n\n    @action\n    toggleIsDone = () => {\n        this.isDone = !this.isDone\n    }\n\n    @action\n    updateText = (text: string) => {\n        this.text = text;\n    }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport {StoreProvider} from \"./helpers/store-provider\";\nimport {TodoList} from \"./stores/todo-list\";\n\nconst todoList = new TodoList([\n    'Tamas Ba Hamsar',\n    'Tamrin Maktabkhoone',\n    'Car Wash'\n]);\n\n//@ts-ignore - for debugging\nwindow.todoList = todoList\n\nReactDOM.render(\n    <StoreProvider value={todoList}>\n        <App/>\n    </StoreProvider>\n    , document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import {action, computed, observable} from \"mobx\";\nimport TodoItem from \"./todo-item\";\n\nexport class TodoList {\n    @observable.shallow list: TodoItem[] = [];\n\n    constructor(todos: string[]) {\n        todos.forEach(this.addTodo);\n    }\n\n    @action\n    addTodo = (text: string) => {\n        this.list.push(new TodoItem(text));\n    }\n\n    @action\n    removeTodo = (todo: TodoItem) => {\n        this.list.splice(this.list.indexOf(todo), 1);\n    };\n\n    @computed\n    get finishedTodos(): TodoItem[] {\n        return this.list.filter(todo => todo.isDone);\n    }\n\n    @computed\n    get openTodos(): TodoItem[] {\n        return this.list.filter(todo => !todo.isDone);\n    }\n}\n"],"sourceRoot":""}